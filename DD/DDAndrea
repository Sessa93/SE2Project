1) Introduction

  - Purpose
    This document represents the Design Document(DD)
    The purpose of the Design Document is to provide a medium/base level description of the design of MyTaxiService
    in order to allow for software developers to proceed with an understanding of what is to be
    built and how it is expected to built.
    The main goal of this document is to completely describe the system-to-be by:
      - Detecting high-level components of the software to be
      - Describing how these components communicate and interact with each other
      - Describing how software components are distributed on the architecture's tiers
      - Motivating and describing the adopted architecture style

  - Scope
    The aim of this project is to develop MyTaxiService, a web/mobile application that
    makes easier and quicker taking taxies within the city’s borders. Thanks to MyTaxiService,
    anyone can request or book a taxi and get realtime information about how long
    it will take to be picked up or about the taxi’s current position and identification code.
    In addition to that, MyTaxiService provides an efficient way to allocate taxies by dividing
    the city in zones and using a queue based allocation system, in order to reduce the
    average waiting time and city’s traffic.
    This Software Design is focused on the base level system and critical parts
    of the system.

  - Terms Definition
    - Glossary

    - Acronyms
        DD: Design Document
        MVC: Model View Controller
        FIFO: First In First Out
        API: Application Programming Interface
        UI: User Interface
        GPS: Global Positioning System

  - Reference Documents
    - RASD v1.1

  - Document Structure
    - Introduction
      This section provides a general description of the Design Document by clearly stating purpose an aim of the project.
      It also include a disambiguation section to help the reader in the process of resolving the ambiguity generated by
      the use of natural language

    - Architecture Design
      The first part of this section provides a detailed description of the high-level components of MyTaxiService and of how
      these components interact.
      The second part introduces the architecture style chosen for MyTaxiService. The focus is on motivation, advantages and possible
      disadvantages of the chosen architecture.

    - Algorithms Design
      The section aims to provide a very medium/low level description of some routine functionalities of MyTaxiService.
      Some code is included.

    - User Interface Design
      In this section are provided some mockups describing the requirements of the user interface to-be

    - Requirements Traceability
      This section provides a matrix of traceability that allows the reader to map functional requirements on the
      previously defined software components

2 - Architectural Design

  - Overview
      The architectural design section is divided into two main parts:
        - Software components description and interaction
            In this section is provided a detailed description of the main components of the software system
            and of their interactions.
            To exemplify the above mentioned description a set of UML diagrams(Component, Deployment, Sequence diagrams) is
            included.
        - Architectural styles and patterns
            In this section the software system architecture is illustrated using a schematic diagram.
            In addition to that all the architectural choices, patterns and styles considered are motivated and described.

  - High level components and their interactions
      Controller Components:
        - Taxi Messages Dispatcher:
            This component provides the functionality of dispatching messages from MyTaxiService(B) to
            mtaxi drivers. Examples of these messages are: zone change order and ride requests
            . This notification includes pick up requests and general alert messages.

        - User Messages Dispatcher:
            This component provides the functionality of dispatching messages from MyTaxiService(B) to users.
            Examples of these messages are : approximate waiting time for being picked up, the requested mtaxi's identifier

        - Request Manager:
            This component is in charge of:
            - managing all types of requests coming from the Requests Receiver(this requires an
            interaction with the User Messages Dispatcher, the Taxi Messages Dispatcher, the Queue Manager and the
            Data Manager)
            - managing a situation of non fair distribution of mtaxies in the city's zone(this requires an interaction
            with the Queue Manager)
            - observing the Queue Manager to check if it has detected

        - External Communication manager:
            This component is in charge of the interaction of MyTaxiService(B) with external services such as
            the traffic information service or the mtaxies GPS data and allows other components to access these pieces of information.


        - Location Manager
            This component digests the data provided by the External Communication Manager in order to reason in terms of positions and distances.
            This data is then accessed by the Queue Manager to perform its tasks

        - Queue Manager:
            This component is in charge of:
            - distributing available mtaxies in city's zones and organize them in zone per zone queues
            - checking periodically if the distribution of mtaxies in city's zones is fair and computing the mtaxies
            that need to be moved to other zones

        - Request Receiver:
            This component manages incoming messages from users and mtaxies.
            According to the type of message, the request receiver will properly invoke services provided by the request manager.

      Model Components
        - Data Manager:
            This component is in charge of managing all accesses to the database system. It works as a sort of
            intermediate layer between the application logic and the database system.
            It offers the functionalities of user/driver registration and information access/updating.

      View Components:
        - MyTaxiServiceAppUserUI:
            This component is in charge of managing the interaction with MyTaxiService of a generic user via the mobile application
        - MyTaxiServiceAppDriverUI:
            This component is in charge of managing the interaction with MyTaxiService of a generic mtaxi driver via the MYT device
        - MyTaxiServiceWebUserUI:
            This component is in charge of managing the interaction with MyTaxiService of a generic user via the web site version of MyTaxiService

    - Components Interfaces

    - Architecture Styles Description
      Some general considerations on the domain of the environment:
        - The number of available mtaxies within the city could be very high(ie a thousand of mtaxies).
        - The number of requests by active users could also be very high typically in the order of the available mtaxies.
      Due to those simple considerations the chosen architecture style is a mix of two well known styles:
        - 3 tiers Client/Server architecture
        - Event Based architecture(Publisher/Subscriber)
      The Client/Server architectures is used to manage all types of critical requests(booking/ride requests, login, registration and ) coming from the users of MyTaxiService(drivers and passenger).
      Such an architecture introduce a sort of synchronization between the central system and the clients of the system.
      This synchronization guarantees to the clients that all requests are correctly received and stored by the central system.
      Also due to the possible high number of requests coming from users this particular style reveals to be very scalable
      and reliable.
      The event base architecture is used for non critical communications i.e. zone specific alert messages or change zone orders
      forwarded to a specific subset of mtaxies present in a particular zone.
      In this case the event based style is suitable because all messages forwarded to mtaxies driver have two characteristics:
        - Do not need any reply(asynchronous)
        - Usually involve a high number of mtaxies

      In particular each "topic" of the publisher corresponds to a particular city zone, all the mtaxies present in the zone
      are automatically subscribed to the corresponding topic. Events are generated internally in the central system, change zone event
      are produced by the Queue manager component, while eventual zone specific alert are generated by the Request manager in case problems
      are detected in a particular zone.
      The client/server styles, as stated above, is a typical 3-tier architecture composed by:
        - One web server hosting the web ui interface of MyTaxiService
        - One or more application server(in order to guarantee the availabilty/relaiabilty of the system) hosting
          the core logic of MyTaxiService, this tier also includes the servers needed to implements the Event Based styles
        - A distributed database system to store the informations related to users and mtaxi drivers.

      Follows a schematic diagram of the architecture:
      TODO GIORGIO

      As already mentioned above the central system makes use of external service regarding the traffic information in the
      city. It could be assumed that information are distributed to MyTaxiService via a SOA architecture because this is
      the most suitable(and most used) way to distribute data and services to external companies.
