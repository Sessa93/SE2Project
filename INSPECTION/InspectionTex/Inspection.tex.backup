% !TEX TS-program = pdflatex
% !TEX encoding = UTF-8 Unicode

% This is a simple template for a LaTeX document using the "article" class.
% See "book", "report", "letter" for other types of document.

\documentclass[11pt,titlepage]{article} % use larger type; default would be 10pt

\usepackage[utf8]{inputenc} % set input encoding (not needed with XeLaTeX)

%%% Examples of Article customizations
% These packages are optional, depending whether you want the features they provide.
% See the LaTeX Companion or other references for full information.

%%% PAGE DIMENSIONS
\usepackage{geometry} % to change the page dimensions
\geometry{a4paper} % or letterpaper (US) or a5paper or....
% \geometry{margin=2in} % for example, change the margins to 2 inches all round
% \geometry{landscape} % set up the page for landscape
%   read geometry.pdf for detailed page layout information

\usepackage{graphicx} % support the \includegraphics command and options
\usepackage{titlepic}

% \usepackage[parfill]{parskip} % Activate to begin paragraphs with an empty line rather than an indent

%%% PACKAGES
\usepackage{booktabs} % for much better looking tables
\usepackage{array} % for better arrays (eg matrices) in maths
\usepackage{paralist} % very flexible & customisable lists (eg. enumerate/itemize, etc.)
\usepackage{verbatim} % adds environment for commenting out blocks of text & for better verbatim
\usepackage{subfig} % make it possible to include more than one captioned figure/table in a single float
% These packages are all incorporated in the memoir class to one degree or another...

%%% HEADERS & FOOTERS
\usepackage{fancyhdr} % This should be set AFTER setting up the page geometry
\pagestyle{plain} % options: empty , plain , fancy
\renewcommand{\headrulewidth}{0pt} % customise the layout...
\lhead{}\chead{}\rhead{}
\lfoot{}\cfoot{\thepage}\rfoot{}

%%% SECTION TITLE APPEARANCE
\usepackage{sectsty}
\allsectionsfont{\sffamily\mdseries\upshape} % (See the fntguide.pdf for font help)
% (This matches ConTeXt defaults)

%%% ToC (table of contents) APPEARANCE
\usepackage[nottoc,notlof,notlot]{tocbibind} % Put the bibliography in the ToC
\usepackage[titles,subfigure]{tocloft} % Alter the style of the Table of Contents
\renewcommand{\cftsecfont}{\rmfamily\mdseries\upshape}
\renewcommand{\cftsecpagefont}{\rmfamily\mdseries\upshape} % No bold!

\newenvironment{changemargin}[3]{%
\begin{list}{}{%
\setlength{\topsep}{0pt}%
\setlength{\headsep}{#3}%
\setlength{\leftmargin}{#1}%
\setlength{\rightmargin}{#2}%
\setlength{\listparindent}{\parindent}%
\setlength{\itemindent}{\parindent}%
\setlength{\parsep}{\parskip}%
}%
\item[]}{\end{list}}

%Table Formatting
\usepackage{tabularx,hhline}
\usepackage{pbox}

\usepackage{listings}
\usepackage{color}

\definecolor{myblue}{rgb}{0.031,0.56,0.741}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\definecolor{lightgray}{rgb}{0.988,0.988,0.988}

\lstset{
   backgroundcolor=\color{lightgray},
   extendedchars=true,
   basicstyle=\footnotesize\ttfamily,
   showstringspaces=false,
   showspaces=false,
   numbers=left,
   numberstyle=\footnotesize,
   numbersep=7pt,
   tabsize=2,
   breaklines=true,
   showtabs=false,
   captionpos=b,
   commentstyle=\color{myblue},
   keywordstyle=\color{blue},
   stringstyle=\color{mymauve},
}

%%% END Article customizations

%%% The "real" document content comes below...

\titlepic{\includegraphics[scale=0.60]{polimi_logo.jpg}}
\title{Inspection \\ \vspace{1cm} \large{Version 1.0}} 
\author{Giorgio Pea(Mat. 853872), Andrea Sessa(Mat. 850082)}
\date{5/1/2016} 

\begin{document}

\maketitle

\newpage

\tableofcontents

\newpage

\section{Introduction}

\section{Classes}

Included in this section the two java classes subjected to the analysis.\newline

\noindent File: /appserver/web/web-core/src/main/java/org/apache/catalina/ssi/\textbf{SSIServlet.java}\newline\newline
Methods under inspection:
  \begin{itemize}
    \item \textbf{\textit{init()}}
    \item \textbf{\textit{requestHandler(HttpServletRequest req, HttpServletResponse res)}}
    \item \textbf{\textit{processSSI( HttpServletRequest req , HttpServletResponse res , URL resource )}}
  \end{itemize}

\noindent File: /appserver/web/web-core/src/main/java/org/apache/catalina/ssi/\textbf{SSIMediator.java}\newline\newline
Methods under inspection:
  \begin{itemize}
    \item \textbf{\textit{substituteVariables(String val)}}
  \end{itemize}
  
\newpage


\section{Functional Role}
  In this section are included some information about the functioning of tha analyzed classes and methods.\newline

\subsection{SSIServlet.java}

  From the Javadoc:
  
  \lstinputlisting[language=Java, firstnumber=78, firstline=78, lastline=81]{SSIServlet.java}

  \noindent This class represents a Java EE servlet used to process requests that include some SSI instruction.\newline
  SSI(Server Side Include) that is a simple interpreted server-side scripting language.
  The most frequent use of SSI is to include the contents of one or more files into a web page on a web server.

  \begin{itemize}
    \item \textit{Init()}
    \item \textit{requestHandler()}
      \newline From the inspection of the code this function is only called when the serverlet receives a HTTP Get or Post request.
      The javadoc for the method, included in the code, states:
      
      \lstinputlisting[language=Java, firstnumber=173, firstline=173, lastline=180]{SSIServlet.java}
      
      Hence the method accepts as parameters a HttpServletRequest,the incoming request, and a HttpServletResponse that is a reference
      to the response.\newline
      
      Now the objective of the method is to retrieve the correct resource from the serverlet context.
      If the debug level is greater than zero then log a message into the logger for debug purposes.
      \lstinputlisting[language=Java, firstnumber=183, firstline=183, lastline=188]{SSIServlet.java}

      The comment is very clear: it checks if the resource is either in the `WEB-INF` or `META-INF` subdirectories;
      if so the function return with an error code.
      \lstinputlisting[language=Java, firstnumber=189, firstline=189, lastline=196]{SSIServlet.java}
      
      Here the function tries to retrieve the URL to the resource; it also performs an existence check on the resource,
      if the resource doesn't exist the function return an error.
      \lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=202]{SSIServlet.java}
      
      In the final part, the function starts to initialize the header of the HttpServletResponse by setting:
      the mime type, the encoding of the output text and the expiration time for the response(in seconds, see init()).\newline
      Finally the processSSI() function is invoked passing as parameters the original request, the reference to the response and the resource.
      \lstinputlisting[language=Java, firstnumber=203, firstline=203, lastline=213]{SSIServlet.java}
      \newpage
    \item \textit{processSSI()}

  \end{itemize}

\subsection{SSIMediator.java}
  From the Javadoc of the class:
  
  \lstinputlisting[language=Java, firstnumber=75, firstline=75, lastline=78]{SSIMediator.java}
  
  The class is inserted into the context of SSI processing, in particular this class take care of
  how many different implementations of the SSI instructions can communicate and exchange data with each other.\newline
  Follows a detailed description of the assigned methods:
  \begin{itemize}
   \item \textit{substituteVariables()}
    \lstinputlisting[language=Java, firstnumber=246, firstline=246, lastline=249]{SSIMediator.java}
    The method accepts as parameter a string and returns a new string to which a variables substitution process has been applied.
    \lstinputlisting[language=Java, firstnumber=251, firstline=251, lastline=253]{SSIMediator.java}
    It checks if the string contains `\$` or `\&`, if not there is nothing to substitute so the original string is simply returned.
    Otherwise: 
    \lstinputlisting[language=Java, firstnumber=253, firstline=253, lastline=259]{SSIMediator.java}
    It's easy to understand(from the comments and javadoc) that above snippet of code substitute each occurrence of HTML special codes with the real character. \newline
    \lstinputlisting[language=Java, firstnumber=261, firstline=261, lastline=274]{SSIMediator.java}
    This part of the code takes care of substuting `\&\#n` with `n` where `n` is an integer number.
    See the javadoc of StringBuilder(Java SE 7 class) for a detailed explanation of the methods.\newline
    The remaining code processes variables and substitutes their current value.\newline
    Variables are always in the form `\$ varName` and could possibly be wrapped, ie. `\$\{varName\}`. 
    This information has been collected by an direct analysis of the code and by means of the few comments inserted. 
    The actual value of the variables found in the string are retrieved by means of the `getVariablesValue()` function(also defined in SSIMediator.java).\newline
    Find the first `\$`, eventually escaped.
    \lstinputlisting[language=Java, firstnumber=277, firstline=277, lastline=290]{SSIMediator.java}
    Identifies the portion string to substitute [nameStart, nameEnd] and the name of the variable [start, end].
    Also the functions consider the possibility that the variable could be wrapped so it processes the presence of `\{` and `\}` that
    are wrapping the variable name.
    \lstinputlisting[language=Java, firstnumber=291, firstline=291, lastline=307]{SSIMediator.java}
    Finally the variable name has been identified in the original string [start, end] and the `getVariablesValue()` method is called
    to retrieve the value of the variable. The value is then substituted and the function seeks for the presence of other variables.
    If no more variables are found, the function returns the processed string.
    \lstinputlisting[language=Java, firstnumber=308, firstline=308, lastline=318]{SSIMediator.java}


  \end{itemize}


\section{Issues}
In this section is included a list of problems found during the inspection of the assigned code.
\subsection{SSIServlet.java}
  \textbf{General Considerations} \hfill \\
  In general the class lacks of documentation: comments and javadoc are not complete and where inserted are sometimes meaningless and very short.
  \begin{itemize}
   \item \textit{init()}
   \item \textit{requestHandler()}
    \begin{enumerate}
     \item Checklist[8,9]: All indentations in the class are made by means of tabs
     \item Checklist[11]: The conditional block
      \lstinputlisting[language=Java, firstnumber=185, firstline=185, lastline=188]{SSIServlet.java}
      uses no enclosing braces
     \item Checklist[18]: No comments from line 210 to the end of the function
     %\item Checklist[33]: The declarations of variables in lines
      %\lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=197]{SSIServlet.java}
      %\lstinputlisting[language=Java, firstnumber=203, firstline=203, lastline=203]{SSIServlet.java}
      %should be placed at the start of the function block
     \item Checklist[40]: The lines
      \lstinputlisting[language=Java, firstnumber=191, firstline=191, lastline=191]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=198, firstline=198, lastline=198]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=204, firstline=204, lastline=204]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=208, firstline=208, lastline=208]{SSIServlet.java}
      uses for comparation `==` instead of `equals()`
     \item Checklist[52,53]: The line 
      \lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=197]{SSIServlet.java}
      may throws a `MalformedURLException`, neither actions are taken to manage the exception nor the exception is explicitly re-thrown
    \end{enumerate}
   \item \textit{processSSI()}
  \end{itemize}


\subsection{SSIMediator.java}
  \textbf{General Considerations} \hfill \\
  In general the class lacks of documentation: the javadoc is not complete and many instructions blocks are left with no comments at all.
  \begin{itemize}
   \item \textit{substituteVariables()}
   \item Checklist[8,9]: Tabs are used for identation for all the function
   \item Checklist[23]: The Javadoc provided for the function is not complete 
   \item Checklist[11]: No enclosing braces in the following if statements:
    \lstinputlisting[language=Java, firstnumber=253, firstline=253, lastline=253]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=303, firstline=303, lastline=303]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=307, firstline=307, lastline=307]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=311, firstline=311, lastline=311]{SSIMediator.java}


   \item Checklist[52,53]: No action are taken in case one of the following lines throws a NullPointerException:
    \lstinputlisting[language=Java, firstnumber=262, firstline=262, lastline=262]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=264, firstline=264, lastline=264]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=270, firstline=270, lastline=270]{SSIMediator.java}
    
   \item Checklist[52,53]: No action are taken in case one of the following lines throws IndexOutOfBoundsException:
    \lstinputlisting[language=Java, firstnumber=266, firstline=266, lastline=267]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=268, firstline=268, lastline=268]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=269, firstline=269, lastline=269]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=279, firstline=279, lastline=279]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=286, firstline=286, lastline=286]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=287, firstline=287, lastline=287]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=297, firstline=297, lastline=297]{SSIMediator.java}
    \lstinputlisting[language=Java, firstnumber=313, firstline=313, lastline=313]{SSIMediator.java}
    
   \item Checklist[40]: The line
    \lstinputlisting[language=Java, firstnumber=311, firstline=311, lastline=311]{SSIMediator.java}
    uses for comparation `==` instead of `equals()`





  \end{itemize}

\section{Additional Considerations}

\section{Appendix}
\subsection{Java Checklist}

\subsection{Statistics}

\end{document}
