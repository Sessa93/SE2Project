Last update: 16/10/15

Scenarios/Use cases:

1)A passenger requests of a taxi
  Actors: Taxi(driver), Passengers, Server/Client app(the system)
  Entry Cnd: The passenger requests a taxi ride
  Exit Cnd: The system acknowledges the passenger

2) A taxi(driver) informs the system of his availability
  Actors: Taxi(driver), the system
  Entry Cnd: The taxi driver informs the system about his availability
  Exit Cnd: The system acknowledges the taxi driver

3) A taxi driver informs the system that he has terminated a request
  Actors: Taxi(driver), the system, (passengers?)
  Entry Cnd: The driver informs
  Exit Cnd: The system Acknowledges the driver

4) A user reserve a ride
  Actors: user, the system
  Entry Cnd: The user requests a reserved ride
  Exit Cnd: The system acknowledges the driver

5) A request is rejected

6) No taxi available

The System <-> myTaxiService

Requirements:
 1) The user can undo a request (F)
 2) The system has to guarantee that a taxi arrives at the origin of the ride within a fixed time(NF)
 3) The user has to specify the origin of the ride(F)
 4) The taxi driver waits for the passenger that has requested the ride at the origin point for a maximum amount of time, after that the taxi returns available(NF)
 5) The user has to specify the time of departure when he reserves a taxi(F)
 6) A taxi that joins this service has to mount a GPS system(to specify)(C)
 7) The System uses the GPS information to determinate if a taxi is in service(F)
 8) A taxi driver has to accept or not a request within a fixed time, otherwise the request is rejected(NF)
 9) The System puts the user in a waiting list if no taxi is available(F) -> Scenario
 10) The user can undo a reservation within 10 minutes from the meeting time(NF)
 11) The taxies that partecipate to the service can only manage request and reservation from the service

Questions:
  1) Fair?
  2) A taxi accept passenger only
