% !TEX TS-program = pdflatex
% !TEX encoding = UTF-8 Unicode

% This is a simple template for a LaTeX document using the "article" class.
% See "book", "report", "letter" for other types of document.

\documentclass[11pt,titlepage]{article} % use larger type; default would be 10pt

\usepackage[utf8]{inputenc} % set input encoding (not needed with XeLaTeX)

%%% Examples of Article customizations
% These packages are optional, depending whether you want the features they provide.
% See the LaTeX Companion or other references for full information.

%%% PAGE DIMENSIONS
\usepackage{geometry} % to change the page dimensions
\geometry{a4paper} % or letterpaper (US) or a5paper or....
% \geometry{margin=2in} % for example, change the margins to 2 inches all round
% \geometry{landscape} % set up the page for landscape
%   read geometry.pdf for detailed page layout information

\usepackage{graphicx} % support the \includegraphics command and options
\usepackage{titlepic}

% \usepackage[parfill]{parskip} % Activate to begin paragraphs with an empty line rather than an indent

%%% PACKAGES
\usepackage{booktabs} % for much better looking tables
\usepackage{array} % for better arrays (eg matrices) in maths
\usepackage{paralist} % very flexible & customisable lists (eg. enumerate/itemize, etc.)
\usepackage{verbatim} % adds environment for commenting out blocks of text & for better verbatim
\usepackage{subfig} % make it possible to include more than one captioned figure/table in a single float
% These packages are all incorporated in the memoir class to one degree or another...

%%% HEADERS & FOOTERS
\usepackage{fancyhdr} % This should be set AFTER setting up the page geometry
\pagestyle{plain} % options: empty , plain , fancy
\renewcommand{\headrulewidth}{0pt} % customise the layout...
\lhead{}\chead{}\rhead{}
\lfoot{}\cfoot{\thepage}\rfoot{}

%%% SECTION TITLE APPEARANCE
\usepackage{sectsty}
\allsectionsfont{\sffamily\mdseries\upshape} % (See the fntguide.pdf for font help)
% (This matches ConTeXt defaults)

%%% ToC (table of contents) APPEARANCE
\usepackage[nottoc,notlof,notlot]{tocbibind} % Put the bibliography in the ToC
\usepackage[titles,subfigure]{tocloft} % Alter the style of the Table of Contents
\renewcommand{\cftsecfont}{\rmfamily\mdseries\upshape}
\renewcommand{\cftsecpagefont}{\rmfamily\mdseries\upshape} % No bold!

\newenvironment{changemargin}[3]{%
\begin{list}{}{%
\setlength{\topsep}{0pt}%
\setlength{\headsep}{#3}%
\setlength{\leftmargin}{#1}%
\setlength{\rightmargin}{#2}%
\setlength{\listparindent}{\parindent}%
\setlength{\itemindent}{\parindent}%
\setlength{\parsep}{\parskip}%
}%
\item[]}{\end{list}}

%Table Formatting
\usepackage{tabularx,hhline}
\usepackage{pbox}

\usepackage{listings}
\usepackage{color}

\definecolor{myblue}{rgb}{0.031,0.56,0.741}
\definecolor{mygray}{rgb}{0.5,0.5,0.5}
\definecolor{mymauve}{rgb}{0.58,0,0.82}
\definecolor{lightgray}{rgb}{0.988,0.988,0.988}

\lstset{
   backgroundcolor=\color{lightgray},
   extendedchars=true,
   basicstyle=\footnotesize\ttfamily,
   showstringspaces=false,
   showspaces=false,
   numbers=left,
   numberstyle=\footnotesize,
   numbersep=7pt,
   tabsize=2,
   breaklines=true,
   showtabs=false,
   captionpos=b,
   commentstyle=\color{myblue},
   keywordstyle=\color{blue},
   stringstyle=\color{mymauve},
}

%%% END Article customizations

%%% The "real" document content comes below...

\titlepic{\includegraphics[scale=0.60]{polimi_logo.jpg}}
\title{Inspection Document \\ \vspace{1cm} \large{Version 1.0}} 
\author{Giorgio Pea(Mat. 853872), Andrea Sessa(Mat. 850082)}
\date{5/1/2016} 

\begin{document}

\maketitle

\newpage

\tableofcontents

\newpage

\section{Introduction}
  The inspection document that follows contains the results of an inspection process on
  the classes and the methods listed below.\newline
  These results inspection process is based on a given checklist(see reference section) that enumerates a series of
  code errors and software aspects to be considered. Additional considerations over the quality and the functional 
  role of the software artifacts analyzed are also mentioned. 

\section{Classes}

Included in this section are two java classes under analysis.\newline

\noindent File: /appserver/web/web-core/src/main/java/org/apache/catalina/ssi/\textbf{SSIServlet.java}\newline\newline
Methods under inspection:
  \begin{itemize}
    \item \textbf{\textit{init()}}
    \item \textbf{\textit{requestHandler(HttpServletRequest req, HttpServletResponse res)}}
    \item \textbf{\textit{processSSI( HttpServletRequest req , HttpServletResponse res , URL resource )}}
  \end{itemize}

\noindent File: /appserver/web/web-core/src/main/java/org/apache/catalina/ssi/\textbf{SSIMediator.java}\newline\newline
Methods under inspection:
  \begin{itemize}
    \item \textbf{\textit{substituteVariables(String val)}}
  \end{itemize}
  
\newpage


\section{Functional Role}
  Included in this section is some information about the functional behavior of the analyzed classes and methods.\newline

\subsection{SSIServlet.java}

  From the Javadoc:
  
  \lstinputlisting[language=Java, firstnumber=78, firstline=78, lastline=81]{SSIServlet.java}

  \noindent This class represents a Java EE Servlet used to process HTTP requests that includes some SSI instructions.\newline
  SSI(Server Side Include) is a interpreted server-side scripting language,
  that is usually used to include the contents of one or more files into a web page.\newline
  Follows a description of the methods the analyzed for this class.

  \begin{itemize}
    \item \textbf{\textit{Init()}}
      \newline From the javadoc of the method:
      \lstinputlisting[language=Java, firstnumber=104, firstline=104, lastline=109]{SSIServlet.java}
      This method takes care of initialize the Java EE Servlet by retrieving and setting the configuration
      parameters.\newline
      The role of these configuration parameters is explained below:
      \begin{itemize}
       \item \textbf{debug}:
	A flag used to manage debug messages: if debug = 0 then no debug messages logged
       \item \textbf{isVirtualWebappRelative}:
	A flag used to manage how file paths in SSI instructions are processed: if isVirtualWebappRelative is true then all the file path are
	considered relative to the root of the web-server.
       \item \textbf{expires}:
	Specifies the expiration time of the HTTP request managed by Servlet(in seconds)
       \item \textbf{buffered}:
	A flag used to manage how the content of HTTP responses processed by this Servlet are written on the output stram:
	if buffered is true then this writing is buffered(see processSSI() for additional explanations)
       \item \textbf{inputEncoding}:
	Specifies the characters encoding of the HTTP requests processed by this Servlet
       \item \textbf{outputEncoding}:
	Specifies the characters encoding of the HTTP responses processed by this Servlet
      \end{itemize}

      

    \item \textbf{\textit{requestHandler()}}
      \newline From the Javadoc of the method:
      
      \lstinputlisting[language=Java, firstnumber=173, firstline=173, lastline=180]{SSIServlet.java}
      
      This method takes care of process HTTP get or post requests managed by this Servelet. In particular 
      requestHandler() retrieves the file paths present in eventual SSI commands, checks if they points to an
      existing resource on the web server, sets some configuration parameters for the processed HTTP request, and 
      invokes processSSI().\newline
      
      In this block of code the method checks the debug flag of the Servelet;
      If debug is greater than zero then logs a message into the logger for debug purposes.
      \lstinputlisting[language=Java, firstnumber=183, firstline=183, lastline=188]{SSIServlet.java}

      This block of code checks if the file paths present in the SSI commands does exists or points to a resource in the `WEB-INF` or `META-INF` subdirectories,
      if so the method terminates and logs an error message.
      \lstinputlisting[language=Java, firstnumber=189, firstline=189, lastline=196]{SSIServlet.java}
      
      In this block of code the method tries to retrieve the resource associated with the file path present in the SSI commands.
      If this resource doesn't exist the method terminates and logs an error message.
      \lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=202]{SSIServlet.java}
      
      In this block of code the method sets some header fields of the HTTP response to be processed:
      it sets the mime type, the character encoding of the output text and the expiration time for the response(in seconds, see init()).
      At the end of the method the processSSI() method is invoked.\newline
      
      \lstinputlisting[language=Java, firstnumber=203, firstline=203, lastline=213]{SSIServlet.java}
      \newpage
      
    \item \textbf{\textit{processSSI()}}
      \newline\textit{No Javadoc is available for this method}\newline
      This method parses the SSI commands contained in a given HTTP request via the SSIProcessor class and writes the result
      of this processing in the output stream of the Servlet.\newline
      
      In this block of code the method takes care of the initialization of the stream used to read the data contained
      in the resource and checks the characters encoding of this data according to the character encoding configuration of the Servelet
      \lstinputlisting[language=Java, firstnumber=233, firstline=233, lastline=245]{SSIServlet.java}
      
      
      In this block of code the method parses the SSI commands contained in the web page by using the process() method of the SSIProcessor class.
      The results are written on the Servlet output stream.\newline
      \lstinputlisting[language=Java, firstnumber=222, firstline=222, lastline=222]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=247, firstline=247, lastline=248]{SSIServlet.java}
      

      In this block of code the method sets different types of output stream for the given HTTP response accordingly to buffered flag of the Servelet,
      and flushes them.
      
      \lstinputlisting[language=Java, firstnumber=226, firstline=226, lastline=231]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=252, firstline=252, lastline=256]{SSIServlet.java}

  \end{itemize}

\subsection{SSIMediator.java}
  From the Javadoc:
  
  \lstinputlisting[language=Java, firstnumber=75, firstline=75, lastline=78]{SSIMediator.java}
  
  \noindent This class take care of
  how many different implementations of the SSI instructions can communicate and exchange data with each other.\newline
  Follows a description of the methods the analyzed for this class.
  \begin{itemize}
   \item \textbf{\textit{substituteVariables()}}
    From the Javadoc:
    \lstinputlisting[language=Java, firstnumber=246, firstline=246, lastline=249]{SSIMediator.java}
    %This method accepts as parameter a string and returns a new string to which a variables substitution process has been applied.
    This method processes a given string in a way that HTML special characters are normalized and SSI variable are replaced with their
    actual value.
    
    In this block of code the method checks the string contains `\$` or `\&, if not so the method terminates returning the original string(no processing  is needed)
    \lstinputlisting[language=Java, firstnumber=251, firstline=251, lastline=253]{SSIMediator.java}
    
    In this block of code the method normalizes HTML special characters.
    \lstinputlisting[language=Java, firstnumber=255, firstline=255, lastline=259]{SSIMediator.java}
    
  
    In this block of code the method takes care of substuting `\&\#n` with `n` where `n` is an integer number.
    See the javadoc of StringBuilder(Java SE 7 class) for a detailed explanation of the methods.\newline
    The remaining code replaces SSI variables with their current value.\newline
    Variables are always in the form `\$ varName` and could possibly be wrapped, ie. `\$\{varName\}`. 
    This information has been collected by an direct analysis of the code and by means of the few comments inserted. 
    The actual value of the variables found in the string is retrieved using the `getVariablesValue()` method(also defined in SSIMediator.java).\newline
    \lstinputlisting[language=Java, firstnumber=261, firstline=261, lastline=274]{SSIMediator.java}
    
    In this block of code the methods finds the position of the first `\$, eventually escaped, in the string.\newline
    \lstinputlisting[language=Java, firstnumber=277, firstline=277, lastline=290]{SSIMediator.java}
        
    In this block of code the method identifies the SSI variable name 
    considering also the possibility that the variable name could be wrapped in curly braces.
    \lstinputlisting[language=Java, firstnumber=291, firstline=291, lastline=307]{SSIMediator.java}
    
    In this block of code the method replaces the variable name with its actual value using the substituteVariables() method.
    \lstinputlisting[language=Java, firstnumber=308, firstline=308, lastline=318]{SSIMediator.java}

  \end{itemize}


\section{Issues}
In this section is included a list of problems found during the inspection of the assigned code.
\subsection{SSIServlet.java}
  \textbf{General Considerations} \hfill \\
  In general the class lacks of documentation: comments and javadoc are not complete and where inserted are sometimes meaningless and very short.\newline
  All the member(internal) variables are declared as `protected`, it is always preferable to use the `private` access modifier(see checklist 28). 
  \begin{itemize}
   \item \textbf{\textit{init()}}
   \begin{itemize}
    \item Checklist[11]: All the if statements present in the body of this method do not use curly braces
    \item Checklist[23]: The javadoc written for this method is not sufficient to explain its role and its behavior in the context of the SSIServlet class
    \item Checklist[40]: All the comparisons present in the body of this method use improper operators, in fact the elements in comparison are always objects(strings in particular)
    \item Checklist[18]: None of the instructions present in the body of this method is commented. This may be correct if all these instructions are self explicative, but at least the last if statement needs comments to explain what it tries to achieve
    \item Checklist[14]: The following lines:
      \lstinputlisting[language=Java, firstnumber=113, firstline=113, lastline=113]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=116, firstline=116, lastline=116]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=119, firstline=119, lastline=119]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=121, firstline=121, lastline=121]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=126, firstline=126, lastline=126]{SSIServlet.java}
      exceed the length of 80 characters
    \item Checklist[8,9]: The indentation of lines is made using tabs and not spaces
    \item Checklist[52,53]: In the following lines
      \lstinputlisting[language=Java, firstnumber=119, firstline=119, lastline=119]{SSIServlet.java}
      the Long.valueOf method throws a NumberFormatException which is not managed and must be imported
      
      \lstinputlisting[language=Java, firstnumber=113, firstline=113, lastline=113]{SSIServlet.java}
      The Integer.parseInt method throws a NumberFormatException which is not managed and must be imported.
   \end{itemize}

   
   \item \textbf{\textit{requestHandler()}}
    \begin{itemize}
     \item Checklist[8,9]: All indentations in the class are made using tabs and not spaces
     \item Checklist[11]: The following conditional block
      \lstinputlisting[language=Java, firstnumber=185, firstline=185, lastline=188]{SSIServlet.java}
      uses no enclosing braces
     \item Checklist[18]: No comments from line 210 to the end of the function
     \item Checklist[29,33]: The following declarations of variables in lines
      \lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=197]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=203, firstline=203, lastline=203]{SSIServlet.java}
      should be placed in top of the body of the method.
     \item Checklist[40]: The comparisons presen following lines
      \lstinputlisting[language=Java, firstnumber=191, firstline=191, lastline=191]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=198, firstline=198, lastline=198]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=204, firstline=204, lastline=204]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=208, firstline=208, lastline=208]{SSIServlet.java}
      uses improper operator in fact the elements in comparison are object(`==` instead of `equals()`)
     \item Checklist[52,53]: The following line 
      \lstinputlisting[language=Java, firstnumber=197, firstline=197, lastline=197]{SSIServlet.java}
      may throw a `MalformedURLException`, neither managed nor re-thrown
     \item Checklist[15]: Wrong line breaking in the following lines
      \lstinputlisting[language=Java, firstnumber=191, firstline=191, lastline=192]{SSIServlet.java}

    \end{itemize}
    
   \item \textbf{\textit{processSSI()}}
    \begin{itemize}
     \item Checklist[23]: No javadoc has been written for this method
     \item Checklist[28]: The method has the proctected access modifier but it is never invoked from its subclasses. \newline It should be declared as `private`
     \item Checklist[18]: None of the instructions present in the body of this method is commented. This may be
      correct if all these instructions are self explicative, but most of the instructions
      present in this method are not self explicative
    \item Checklist[40]: All the comparisons present in the body of this method use improper operators, in fact the elements in comparison are always objects(strings in particular)
     \item Checklist[29,33]: In these following lines
      local variables are defined and assigned to a value. Since these assigments and definitions
      do not depend from the result of previous instructions, they must be put in the top
      of the body of the method
      \lstinputlisting[language=Java, firstnumber=233, firstline=233, lastline=235]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=239, firstline=239, lastline=239]{SSIServlet.java}
     \item Checklist[1]:
      In this line a local variable of the type "InputStreamReader" is defined. The name of
      this variable is "isr" which does not convey any immediate meaning about the role and the
      use of this variable
      \lstinputlisting[language=Java, firstnumber=239, firstline=239, lastline=239]{SSIServlet.java}

     \item Checklist[52,53]:
      The method openConnection throws an IOException that is not managed\newline
      The method getInputStream throws an IOException that is not managed\newline\newline
      \lstinputlisting[language=Java, firstnumber=233, firstline=233, lastline=234]{SSIServlet.java}
      The getWriter method on the HttpServletResponse object throws a IOException, a IllegalStateException, UnsupportedEncodingException
      which are neither managed nor re-thrown (IllegalStateException)
      \lstinputlisting[language=Java, firstnumber=230, firstline=230, lastline=230]{SSIServlet.java}
      \lstinputlisting[language=Java, firstnumber=255, firstline=255, lastline=255]{SSIServlet.java}

     \item Checklist[58]:
      The method close should be invoked on the bufferedReader variable and on the
      isr variable, since these variables are not used anymore in the rest of the method
      and they represent streams of bytes readers
      \lstinputlisting[language=Java, firstnumber=247, firstline=247, lastline=248]{SSIServlet.java}

    \end{itemize}

  \end{itemize}


\subsection{SSIMediator.java}
  \textbf{General Considerations} \hfill \\
  In general the class lacks of documentation: the javadoc is not complete and many instructions blocks are left with no comments at all.\newline
  All the member(internal) variables are declared as `protected`, it is always preferable to use the `private` access modifier(see checklist 28). 
  \begin{itemize}
   \item \textbf{\textit{substituteVariables()}}
   \begin{itemize}
    \item Checklist[8,9]: Tabs are used for identation for all the function
    \item Checklist[23]: The Javadoc provided for the function is not complete 
    \item Checklist[11]: No enclosing braces in the following if statements:
      \lstinputlisting[language=Java, firstnumber=253, firstline=253, lastline=253]{SSIMediator.java}
      \lstinputlisting[language=Java, firstnumber=303, firstline=303, lastline=303]{SSIMediator.java}
      \lstinputlisting[language=Java, firstnumber=307, firstline=307, lastline=307]{SSIMediator.java}
      \lstinputlisting[language=Java, firstnumber=311, firstline=311, lastline=311]{SSIMediator.java}
      
    \item Checklist[1]: The parameter of the method is named `val` which  which does not convey any immediate meaning about its role and use
    
    \item Checklist[15]: Wrong line breaking in the following line
      \lstinputlisting[language=Java, firstnumber=266, firstline=266, lastline=267]{SSIMediator.java}

    \item Checklist[52,53]: No action are taken in case one of the following lines throws a NullPointerException,  which are neither managed nor re-thrown:
      \lstinputlisting[language=Java, firstnumber=262, firstline=262, lastline=262]{SSIMediator.java}
      \lstinputlisting[language=Java, firstnumber=264, firstline=264, lastline=264]{SSIMediator.java}
      \lstinputlisting[language=Java, firstnumber=270, firstline=270, lastline=270]{SSIMediator.java}
      
    %\item Checklist[52,53]: No action are taken in case one of the following lines throws IndexOutOfBoundsException:
      %\lstinputlisting[language=Java, firstnumber=266, firstline=266, lastline=267]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=268, firstline=268, lastline=268]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=269, firstline=269, lastline=269]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=279, firstline=279, lastline=279]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=286, firstline=286, lastline=286]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=287, firstline=287, lastline=287]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=297, firstline=297, lastline=297]{SSIMediator.java}
      %\lstinputlisting[language=Java, firstnumber=313, firstline=313, lastline=313]{SSIMediator.java}
      
    \item Checklist[40]: The following line
      \lstinputlisting[language=Java, firstnumber=311, firstline=311, lastline=311]{SSIMediator.java}
      uses improper operator in fact the elements in comparison are object(`==` instead of `equals()`)
    \item Checklist[29,33]: The variables in following lines
      \lstinputlisting[language=Java, firstnumber=309, firstline=309, lastline=310]{SSIMediator.java}
      should be placed at the top of the function
    \end{itemize}
  \end{itemize}
\newpage
\section{Additional Issues}
  In this section are included additional problems and issues not present in the checklist
  \subsection{SSIServlet.java}
    \begin{itemize}
      \item \textbf{\textit{init()}}
	\begin{itemize}
	 \item In these lines
	    we have the assignment of properties of the class, and this assignment does not
	    depend from the result of previous instructions. Given that, these instructions should be
	    put in the top of the body of the method
	    \lstinputlisting[language=Java, firstnumber=115, firstline=115, lastline=116]{SSIServlet.java}
	    \lstinputlisting[language=Java, firstnumber=121, firstline=121, lastline=121]{SSIServlet.java}
	    \lstinputlisting[language=Java, firstnumber=123, firstline=123, lastline=123]{SSIServlet.java}

	 \item In the body of this method continuous calls to the methods of the object returned by the
	    getServletConfig() method are performed.
	    This is inefficient since the above mentioned object can be stored in a local variable
	    and so made accessible without method calls
	 \item Methods and properties of the superclass of a class must be referenced by that class using
	    the "super." prefix. This should be done for reasons of clarity and readability, so that
	    the developer can immediately distinguish the manipulation of methods and properties of the superclass of the current class
	    from the manipulation of those which belong to the current class.\newline
	    This behavior is not followed in this method(all lines)

	\end{itemize}

      \item \textbf{\textit{requestHandler()}}
	  \begin{itemize}
	      \item Methods and properties of the superclass of a class must be referenced by that class using
		the "super" prefix. This should be done for reasons of clarity and readability, so that
		the developer can immediately distinguish the manipulation of methods and properties of the superclass of the current class
		from the manipulation of those which belong to the current class.\newline
		This behavior is not followed in lines:
		\lstinputlisting[language=Java, firstnumber=183, firstline=183, lastline=183]{SSIServlet.java}
		And in all lines that present the invocation of `log()`

	      \item Methods and properties of the current class must be referenced within the class using the "this." prefix.
		This should be done for reasons of clarity and readability, so that the developer can immediately distinguish
		the manipulation of methods and properties of the current class from the manipulation of those which belong
		to the superclass of the current class.\newline This is also useful for distinguish the manipulation of properties of
		the current class and local variables.
		This behavior is not followed in lines:
		\lstinputlisting[language=Java, firstnumber=185, firstline=185, lastline=188]{SSIServlet.java}
		\lstinputlisting[language=Java, firstnumber=207, firstline=207, lastline=208]{SSIServlet.java}
	      
	      \item In these lines
	        the ternary operator ? is used. The expression is syntactically valid but the use of ? makes it counter intuitive and less readable.\newline 
		It is preferable to use a classic if-else block.
		\lstinputlisting[language=Java, firstnumber=186, firstline=186, lastline=188]{SSIServlet.java}

	   \end{itemize}
	    
      \item \textbf{\textit{processSSI()}}
	    \begin{itemize}
	     \item Methods and properties of the superclass of a class must be referenced by that class using
		the "super" prefix. This should be done for reasons of clarity and readability, so that
		the developer can immediately distinguish the manipulation of methods and properties of the superclass of the current class
		from the manipulation of those which belong to the current class.\newline
		This behavior is not followed in this method(all lines).

	     \item Methods and properties of the current class must be referenced within the class using the "this." prefix.
		This should be done for reasons of clarity and readability, so that the developer can immediately distinguish
		the manipulation of methods and properties of the current class from the manipulation of those which belong
		to the superclass of the current class.\newline This is also useful for distinguish the manipulation of properties of
		the current class and local variables.
		This behavior is not followed in lines:
		\lstinputlisting[language=Java, firstnumber=220, firstline=220, lastline=223]{SSIServlet.java}
		\lstinputlisting[language=Java, firstnumber=226, firstline=226, lastline=226]{SSIServlet.java}
		\lstinputlisting[language=Java, firstnumber=252, firstline=252, lastline=252]{SSIServlet.java}
		
	     \item In the following two lines of code
	        each statement declares a variable and then assigns to it a `null` value. In general assign a `null` value to a fresh declared
		variable is an useless operation, since this is the default behavior of Java.
		\lstinputlisting[language=Java, firstnumber=224, firstline=224, lastline=225]{SSIServlet.java}

	     \item In the following block of code
	        the first if statement is redundant, it should be deleted and its contents copied into the body of the second if statement.
		\lstinputlisting[language=Java, firstnumber=236, firstline=236, lastline=244]{SSIServlet.java}

	     \item \textbf{[CRITICAL]}In these following lines:
		\lstinputlisting[language=Java, firstnumber=233, firstline=233, lastline=234]{SSIServlet.java}
		  The getInputStream and getContentEncoding methods cannot be called on a "URLConnection" object before opening an actual connection
		  to the resource referred by object itself (to solve this problem the "connect" method must be called on the
		  "URLConnection" object before calling getInputStream, see the javadoc of the URL class)
	    \end{itemize}
   \end{itemize}
  \subsection{SSIMediator.java}
    No particular additional issues has been found in the `substituteVariables()` method.

\newpage
\section{Appendix}
\subsection{References}
   \begin{itemize}
    \item javaCheckList.pdf: Contains the check list used to inspect the code present in this document.
   \end{itemize}
\subsection{Tools Used}
  \begin{itemize}
   \item Atom/ \LaTeX: To redact this document
   \item Eclipse: To simulate the behavior of the assigned code
  \end{itemize}
\subsection{Hours of Work}
  \begin{itemize}
   \item Andrea Sessa: 14.5 hours
   \item Giorgio Pea: 13 hours
  \end{itemize}

\end{document}
